/*
A script that creates a new HTML file in simpatico.io
  Expect them to be served as something like /notes/1
  They should be stand alone HTML files.

  We virtualize the index.[html,js,css,json] resources and allow them to vary as the children vary.
  Adding sideways and "up" navigation decoration in the children can be left for JavaScript at browser runtime.
  Support special "lateral" links.
	Gather all file names in the directory.
	Find the subset that match "[Number].md".
	Find the greatest number in that set.
	Create a file "[Number+1].md"
	Open in sublime text.

  Although we will 'virtualize' those 3 resources in a directory, I think it's still useful to allow as declarative of an expression as we can get. And we should strive to express our boundaries in concrete terms, at the level of string concatenation if we can get away with it. Which we should, if our

  (What does the process want to know? Are they human? Did they read it? Did they understand it? Did they care? Is it something that will help them in the short term (a HOWTO) or in the long term (thought piece, or experiment)). Is someone probing my runtime, by opening dev tools or examining or changing the global object? Are there any plugins present?

  [I worry that I cannot make the long walk to monomorphic application design from this starting point. But I know I must! And too I need to clarify my own thoughts of what the Simpatico Shell really looks like at runtime. And also what a node server looks like that serves markdown, caching in-memory HTML versions. How hard would it be to add a step to that processing, or would it be enough to just virtualize data.json? I think the last is correct: the html file serves to declare the starting "values" from which our application is built. Generally they will parse to become elements in the DOM; more specifically, I want to give special emphasis to the descendents of the SVG element!]

  I would consider this a major milestone. It means that Simpatico, and its principles can be used to form a very simple file-based blog using node as a runtime. This defines an important resource type, which is "declarative, file-system persistent".

  From there, you'd want to introduce Chat. In Simpatico, every process is assigned a GUID, and is expected to maintain a persistent connection to the server. This means for every user, every device, every browser, and every tab, there is a process with a unique GUID. Each of those processes can communicate with each other. This means telling someone about your GUID (copy and paste, or QR code between devices), or registering your GUID with a name. That GUID becomes a Durable Process, meaning, at the very least, it can survive a restart. The firt thing a process does is check if it is part of a Durable Process, and then restore previously known state.

  The primary database datastructure we use in Simpatico is the Rehman Tree using Combine as the reducer, with specific recommendations about how to use localStorage (and other in-browser persistence tools) for each supported browser. This choice of datastructure also lends itself well to "Structured Chat".

  Lots of overlap. Overlap with Matrix. Overlap with fediverse tech. Overlap with Signal.

  Technology and the Law: Technology user's Bill of Rights. Any general purpose computer must have a mode where the machine is paused, and the user can investigate all data-structures on the device. The user must be granted authority to measure and control all network traffic coming on and off the network device. And that is true for ALL devices, including wifi, bluetooth, camera, microphone, GPS, compass, accelerometer, and even the screen and disk.

  We must have these rights to secure the privacy and control of individual citizens over their own lives, and their own interactions with the various instutitions with which they do business. Without these rights, an individual is rendered helpless in the face of even opportunistic attacks. We can no longer rely on "common sense" or "brand reputation" to assure us that wide-spread, even universal, loss of control of our devices is possible. Although the doomsday scenarios are troubling, the more likely scenarios of a cyberwar as prelude to real war should worry us; as should any scenario in which government authority seeks ever more automated intelligence gathering and control over a growing population.

  Simpatico Labs. Exploring emergent complexity.

  "Computer science" at this point is a fairly well established branch of mathematics. It has given us the tools to build operating systems, applications, protocols, embedded systems, that make our modern technology work. The net effect is that more and more human interaction is computer mediated.

  Software application design is what Thomas Kuhn would call "Pre paradigmatic science".

	As an additional challenge, I wrote this file attempting to discover
	the node features I would need at the node repl, rather than with a search.

	See https://stackoverflow.com/questions/41195580/deprecationwarning-calling-an-asynchronous-function-without-callback-is-depreca#41195755
	See https://nodejs.org/docs/latest-v8.x/api/fs.html#fs_fs_open_path_flags_mode_callback

	No doubt this script could be replaced by 10 characters of awk. Oh well!
*/
